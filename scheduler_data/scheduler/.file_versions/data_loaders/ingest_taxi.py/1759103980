import pandas as pd
import requests
from datetime import datetime
import logging

if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

logger = logging.getLogger(__name__)

@data_loader
def load_single_day_sample(*args, **kwargs):
    year = kwargs.get('year', 2024)
    month = kwargs.get('month', 1)
    service_type = kwargs.get('service_type', 'yellow')
    sample_rows = kwargs.get('sample_rows', 10000)

    url = f"https://d37ci6vzurychx.cloudfront.net/trip-data/{service_type}_tripdata_{year}-{month:02d}.parquet"

    logger.info(f"Loading sample from {url}")
    logger.info(f"Target sample size: {sample_rows} rows")

    response = requests.head(url, timeout=30)
    if response.status_code != 200:
        raise Exception(f"File not available: {url} (Status: {response.status_code})")

    df = pd.read_parquet(url)

    if len(df) > sample_rows:
        df_sample = df.head(sample_rows).copy()
        logger.info(f"Sampled {len(df_sample)} rows from {len(df)} total rows")
    else:
        df_sample = df.copy()
        logger.info(f"Using all {len(df_sample)} rows (less than sample size)")

    df_sample['batch_id'] = f"{service_type}_{year}_{month:02d}_sample"
    df_sample['ingestion_timestamp'] = datetime.now()
    df_sample['service_type'] = service_type
    df_sample['source_file'] = url.split('/')[-1]
    df_sample['load_timestamp'] = datetime.now()

    logger.info(f"Sample data ready: {df_sample.shape}")
    return df_sample

@test
def test_output(output, *args) -> None:
    assert output is not None, 'The output is undefined'
    assert len(output) > 0, 'No data was loaded'
    assert 'service_type' in output.columns, 'service_type column missing'
    assert 'batch_id' in output.columns, 'batch_id column missing'
    logger.info(f"Test passed: {len(output)} rows loaded successfully")
