import pandas as pd
import snowflake.connector
from snowflake.connector.pandas_tools import write_pandas
from datetime import datetime
import logging
import os

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter

logger = logging.getLogger(__name__)

@data_exporter
def export_to_snowflake_bronze(df: pd.DataFrame, *args, **kwargs) -> None:
    connection_params = {
        'account': os.getenv('SNOWFLAKE_ACCOUNT'),
        'user': os.getenv('SNOWFLAKE_USER'),
        'password': os.getenv('SNOWFLAKE_PASSWORD'),
        'database': os.getenv('SNOWFLAKE_DATABASE'),
        'warehouse': os.getenv('SNOWFLAKE_WAREHOUSE'),
        'role': os.getenv('SNOWFLAKE_ROLE'),
        'schema': kwargs.get('schema_name', 'RAW')
    }

    missing_params = [key for key, value in connection_params.items() if not value]
    if missing_params:
        raise ValueError(f"Missing Snowflake connection parameters: {missing_params}")

    service_type = df['service_type'].iloc[0] if 'service_type' in df.columns else kwargs.get('service_type', 'unknown')
    batch_id = df['batch_id'].iloc[0] if 'batch_id' in df.columns else 'unknown_batch'
    table_name = kwargs.get('table_name', f"{service_type.upper()}_TRIPS")
    if_exists = kwargs.get('if_exists', 'append')

    logger.info(f"Exporting to {connection_params['database']}.{connection_params['schema']}.{table_name}")
    logger.info(f"Rows: {len(df)}, Service: {service_type}, Mode: {if_exists}")

    conn = snowflake.connector.connect(**connection_params)

    df_export = prepare_dataframe_for_snowflake(df)

    if if_exists in ['append', 'replace']:
        create_bronze_table_if_not_exists(conn, table_name, service_type)

    success, nchunks, nrows, _ = write_pandas(
        conn=conn,
        df=df_export,
        table_name=table_name,
        schema=connection_params['schema'],
        database=connection_params['database'],
        auto_create_table=False,
        overwrite=(if_exists == 'replace'),
        quote_identifiers=False,
        chunk_size=10000
    )

    if success:
        logger.info(f"Export completed: {nrows} rows in {nchunks} chunks")
        log_export_metadata(conn, table_name, service_type, batch_id, nrows)
    else:
        raise Exception("Export failed")

    conn.close()

def prepare_dataframe_for_snowflake(df: pd.DataFrame) -> pd.DataFrame:
    df_clean = df.copy()

    datetime_columns = [col for col in df_clean.columns if 'datetime' in col.lower() or 'timestamp' in col.lower()]
    for col in datetime_columns:
        if df_clean[col].dtype == 'object':
            df_clean[col] = pd.to_datetime(df_clean[col], errors='coerce')

    numeric_columns = [col for col in df_clean.columns if any(x in col.lower() for x in ['amount', 'fare', 'tip', 'distance'])]
    for col in numeric_columns:
        if col in df_clean.columns:
            df_clean[col] = pd.to_numeric(df_clean[col], errors='coerce')

    df_clean['SNOWFLAKE_LOADED_AT'] = datetime.now()
    df_clean.columns = [col.upper() for col in df_clean.columns]

    return df_clean

def create_bronze_table_if_not_exists(conn, table_name: str, service_type: str):
    cursor = conn.cursor()

    cursor.execute(f"SHOW TABLES LIKE '{table_name}'")
    if cursor.fetchone():
        cursor.close()
        return

    create_sql = f"""
    CREATE TABLE IF NOT EXISTS {table_name} (
        VENDORID NUMBER,
        TPEP_PICKUP_DATETIME TIMESTAMP_NTZ,
        TPEP_DROPOFF_DATETIME TIMESTAMP_NTZ,
        PASSENGER_COUNT NUMBER,
        TRIP_DISTANCE FLOAT,
        RATECODEID NUMBER,
        STORE_AND_FWD_FLAG STRING,
        PULOCATIONID NUMBER,
        DOLOCATIONID NUMBER,
        PAYMENT_TYPE NUMBER,
        FARE_AMOUNT FLOAT,
        EXTRA FLOAT,
        MTA_TAX FLOAT,
        TIP_AMOUNT FLOAT,
        TOLLS_AMOUNT FLOAT,
        IMPROVEMENT_SURCHARGE FLOAT,
        TOTAL_AMOUNT FLOAT,
        CONGESTION_SURCHARGE FLOAT,
        AIRPORT_FEE FLOAT,
        SOURCE_FILE STRING,
        FILE_INDEX NUMBER,
        LOAD_TIMESTAMP TIMESTAMP_NTZ,
        BATCH_ID STRING,
        INGESTION_TIMESTAMP TIMESTAMP_NTZ,
        SERVICE_TYPE STRING,
        SNOWFLAKE_LOADED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
        BRONZE_CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
        BRONZE_RUN_ID STRING DEFAULT 'MAGE_' || REPLACE(REPLACE(CURRENT_TIMESTAMP()::STRING, ' ', '_'), ':', '-')
    )
    COMMENT = 'Bronze layer - {service_type} taxi trip data'
    """

    cursor.execute(create_sql)
    logger.info(f"Table {table_name} created")
    cursor.close()

def log_export_metadata(conn, table_name: str, service_type: str, batch_id: str, rows_inserted: int):
    cursor = conn.cursor()

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS BRONZE_EXPORT_LOG (
            EXPORT_ID STRING DEFAULT 'EXP_' || REPLACE(REPLACE(CURRENT_TIMESTAMP()::STRING, ' ', '_'), ':', '-'),
            TABLE_NAME STRING,
            SERVICE_TYPE STRING,
            BATCH_ID STRING,
            ROWS_INSERTED NUMBER,
            EXPORT_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
            SOURCE_SYSTEM STRING DEFAULT 'MAGE'
        )
    """)

    cursor.execute("""
        INSERT INTO BRONZE_EXPORT_LOG (TABLE_NAME, SERVICE_TYPE, BATCH_ID, ROWS_INSERTED)
        VALUES (%s, %s, %s, %s)
    """, (table_name, service_type, batch_id, rows_inserted))

    cursor.close()
